
------------------------------------------------
git checkout -b feature/tix_3 develop
----- add, commit
git push origin feature/tix_3
----- pull request
git checkout develop
git pull origin develop
git push --delete origin feature/tix_3         リモートブランチの削除 (web上で削除できる)
git branch -d feature/tix_3                    ローカルブランチの削除
git remote prune origin --dry-run              ローカルのブランチ一覧最新化 (試し)
git remote prune origin                        ローカルのブランチ一覧最新化
------------------------------------------------


※ブランチが先に進んでたらマージかリベース

develop から masterへマージ

git checkout master              マスターに移動
git merge develop                マージ
git push orgin master            リモートのmasterにpush



git branch feature/tix_12345     (現在devlopブランチであること)
git checkout feature/tix_12345

  もしくは↓(2つ同時)

git checkout -b feature/tix_12345 develop


○コミット時のメッセージ
---------------------------------------------------------
[#12345] change for new function

新機能のための修正
---------------------------------------------------------


---------------------------------------------------------
fix    ：バグ修正
hotfix ：クリティカルなバグ修正
add    ：新規（ファイル）機能追加
update ：機能修正（バグではない）
change ：仕様変更
clean  ：整理（リファクタリング等）
disable：無効化（コメントアウト等）
remove ：削除（ファイル）
upgrade：バージョンアップ
revert ：変更取り消し
---------------------------------------------------------




○ プルリク
・タイトルは日本語で良い
・レビューアを入れること

[#12345] データが複数選択される

---------------------------------------------------------
## 概要


## 関連URL

---------------------------------------------------------





最近追加されたファイルを取得 ddlフォルダから
git log  --grep 'Revert' --invert-grep --diff-filter=A --format='' --name-only -- ddl








---------------------------------------------------

$ git branch                      # 現在のブランチがmasterであることを確認する
$ git log --oneline               # コミットのハッシュ値を調べる
$ git fetch -a -p
$ passwordの入力
$ git checkout dev                # devブランチに移動
$ git merge origin/dev            # devブランチにリモートブランチの内容をマージ(devブランチの最新化)
$ git checkout -b dev#チケットNO  # devブランチをベースにしたトピックブランチの作成
$ git cherry-pick XXXXXXX         # masterブランチにコミットしたものをトピックブランチにもコミット


git log --graph
git log --oneline
git log --graph --oneline --decorate=full






トピックブランチの命名規則

feature/tix_<チケット番号>_<修正概要がわかる名称>
として、git flow を踏襲しつつ、pull requestを利用したい。

http://qiita.com/mint__/items/bfc58589b5b1e0a1856a





git flowでの開発の流れ

①developブランチからfeatureブランチを切って、開発
(②他の人が開発したら自分のfeatureブランチにマージ)
③開発が終わったらfeatureブランチをdevelopにマージして、featureブランチを削除
④developブランチをremoteにpush

①～④を繰り返して開発を進める

⑤開発が終了したらdevelopブランチからreleaseブランチを切ってリリース準備
⑥releaseブランチの編集完了後、developブランチとmasterブランチにマージして、releaseブランチを削除
⑦リリース(masterブランチのデプロイ)
⑧リリース後、バグが発生した場合にはmasterブランチからhotfixブランチを切って対応
⑨バグ対応が完了したらmasterブランチにマージして、hotfixブランチを削除

⑤～⑨を繰り返してバージョン管理を運用する

作業を行うのはfeatureブランチ/releaseブランチ/hotfixブランチ上で
developブランチ/masterブランチでは作業は行わない。





□master
masterブランチでは、リリース可能な状態だけを管理します。また、コミットにはタグを使用してリリース番号を記録します。

□develop = 統合ブランチ
developブランチでは、先のリリースに向けた普段の開発で使用するブランチです。先に説明した統合ブランチの役割を担います。

□フィーチャーブランチ = トピックブランチ
フィーチャーブランチでは、先に説明したトピックブランチの役割を担います。
このブランチは新機能の開発や、バグ修正を行う際にdevelopブランチから分岐します。
フィーチャーブランチでの作業は基本的に共有する必要がないので、リモートでは管理しません。
開発が完了したら、developブランチにマージを行うことで公開します。

□HEAD
HEADとは、現在使用しているブランチの先頭を表す名前です。
デフォルトではmasterの先頭を表しています。HEADが移動することで、使用するブランチが変更されます。
今いるブランチの最新コミット。
ブランチを移動（チェックアウト）すればHEADの位置も変わる
HEAD^、HEAD~はHEADから一つ前のコミットという意味
HEAD^^^、HEAD~~~、HEAD~3のような方法でいくつ前のコミットか指定

□add
作業ディレクトリ内の変更をステージングエリアに追加するコマンドです。
このコマンドは、個々のファイルのアップデート内容を次回コミットの対象とすることを Git に指示します。
ただし、git add コマンドだけでは実際にはローカルリポジトリに何の影響も与えず、
git commit コマンドを実行するまでは変更が実際に記録されることはありません。
これらのコマンドと関連して、作業ディレクトリおよびステージングエリアの状態を確認するために、git status コマンドが用いられます。

git add .       全ての変更をaddする

□コミット
ステージされたスナップショットをローカルリポジトリにコミットするコマンド
git commit は、ステージされたスナップショットをローカルリポジトリにコミットするコマンドです。
コミットされたスナップショットはプロジェクトの「安全に保存された」バージョンであると解釈でき、
明示的に変更指示が行われない限り Git がそれを変更することはありません。
スナップショットはローカルリポジトリにコミットされるため、他の Git リポジトリには全く影響を与えません。

□fetch
git fetch [REMOTENAME] [BRANCH] 
指定したリモートリポジトリから指定したブランチをフェッチする。






1. クローンする。masterブランチが落ちてきます。
git clone PATH

2. ローカルでdevelopブランチを切る。
git branch develop

3. ブランチにHEADを移す。(= ブランチに移動する)
git checkout develop

4. リモートのdevelopブランチをpullする。
git pull origin develop                              ↑現在がdevelopブランチであり、最新状態のためここまで省略

5. developブランチからfeatureブランチを切ります。
git branch feature                                   git branch develop feature/tix_43921

6. featureブランチに移って開発します。
git checkout feature                                 git checkout -b feature/tix_43921
git add .                                            ステージングエリアへ登録
git commit -m "開発した"                             コミット

7. ローカルのdevelopブランチにmergeします。          developブランチはリモート。
git checkout develop
git merge feature                                    git merge feature/tix_43921

複数人でやってる時は、mergeする前に管理者とmergeしても良いか話し合いましょう。 GitHubの場合、featureブランチをdevelopブランチにpullrequestすればいい。

8. リモートのdevelopブランチにpush
git push PATH develop

9. これを繰り返して完成したらdevelopブランチをmasterにmergeして公開！！





認証情報確認
$ git credential fill
protocol=https
host=github.com

protocol=https
host=github.com
path=
username=XXXX
password=XXXX


認証情報削除
$ git credential reject
protocol=https
host=github.com




